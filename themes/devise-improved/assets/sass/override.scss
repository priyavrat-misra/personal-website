@import "node_modules/bootstrap/scss/bootstrap.scss";
@import 'themes';

// Default (light) theme
:root {
  @include light;
}

// Toggled (dark) theme via checkbox
body:has(#dark:checked) {
  @include dark;
}

// System preference for dark mode
@media (prefers-color-scheme: dark) {
  // Default is dark if system prefers it
  :root {
    @include dark;
  }

  // Toggled (light) theme when system preference is dark
  body:has(#dark:checked) {
    @include light;
  }
}

#dark {
    display: none;
}

#theme-toggle {
    cursor: pointer;
    > svg:hover {
        color: var(--color-accent-fg);
    }
}

// Show the MOON icon in light mode
#theme-toggle svg:first-of-type {
    display: var(--display-dark);
}

// Show the SUN icon in dark mode
#theme-toggle svg:last-of-type {
    display: var(--display-light);
}

// Positioning for the toggle container
.theme-toggle-container {
    position: absolute;
    right: 2rem;
    top: 2rem;
}

@view-transition {
    navigation: auto;
}

html {
    scroll-behavior: smooth !important;
}

// systemfontstack.com
code {
    font-family: Menlo, Consolas, Monaco, 'Adwaita Mono', 'Liberation Mono', 'Lucida Console', monospace;
}

body {
    font-family: -apple-system, BlinkMacSystemFont, 'avenir next', avenir, segoe ui, 'helvetica neue', 'Adwaita Sans', Cantarell, Ubuntu, roboto, noto, helvetica, arial, sans-serif;
    padding-left: calc(100vw - 100%);
    background-color: var(--color-canvas-default);
    color: var(--color-fg-default);
}

#content {
    max-width: 650px;
    display: flex;
    flex-direction: column;
    min-height: 100vh;
}

main {
    flex: 1;
}

h1 { font-size: 2rem; }
h2 { font-size: 1.83rem; }
h3 { font-size: 1.67rem; }
h4 { font-size: 1.5rem; }
h5 { font-size: 1.33rem; }
h6 { font-size: 1.17rem; }

header {
    h1 {
        a, a:hover { color: var(--color-fg-default); }
    }
}

footer {
    p {
        text-align: center;
        padding: 1rem 0;
    }
}

img {
    max-width: 100%;
}

#avatar {
    border-radius: 50%;
    display: block;
    margin-left: auto;
    margin-right: auto;
}

.sr-only {
    position: absolute;
    width: 1px;
    height: 1px;
    padding: 0;
    margin: -1;
    overflow: hidden;
    clip-path: inset(50%);
    white-space: nowrap;
    border-width: 0;
}

#blog-heading > * {
    margin-bottom: 0;
}

a {
    color: var(--color-accent-fg);
    text-decoration: underline;
    &:hover {
        text-decoration: none;
    }
    > svg {
        text-decoration: none;
        &:hover {
            color: var(--color-accent-fg);
        }
    }
}

.muted-text, svg {
    color: var(--color-fg-muted);
}

p { margin-bottom: 0.7rem; }

nav > ul > li:not(:last-child) {
    margin-right: 1rem;
}

#tags > *:not(:last-child) {
    margin-right: 0.2rem;
}

.list-inline-item:not(:last-child) {
    margin-right: 1rem;
}

// inspired from github
.highlight > pre {
    border-radius: .375rem;
    font-size: .75rem;
    line-height: 1.45;
    overflow: auto;
    padding: 1rem;
}

// inspired from github
code:not(pre > code) {
    color: var(--color-fg-default);
    background-color: var(--color-neutral-muted);
    border-radius: .375rem;
    font-size: .75rem;
    line-height: 1rem;
    padding-inline-end: .25rem;
    padding-bottom: 2px;
    padding-inline-start: .25rem;
    padding-top: 2px;
}

blockquote {
    color: var(--color-fg-muted);
    border-inline-start-style: solid;
    border-inline-start-width: 3px;
    padding-inline-end: 1rem;
    padding-inline-start: 1rem;
}

#back-to-top {
    position: fixed;
    right: 2rem;
    bottom: 2rem;
}

// copypasta from https://codepen.io/brandonmcconnell/pen/bZqGdw
// now for some timing (in seconds)
$durCharFwd: 0.10; // character typed
$durFullGap: 2.00; // time between typed/delete
$durCharBwd: 0.08; // character deleted
$durDoneGap: 1.00; // time between strings

// initializing some variables and functions
$charCount: 0; $durTotal: 0;
$strings: {{ .Site.Params.header_subtitle }};
@each $string in $strings {
    $charCount: $charCount + str-length($string);
    $durTotal: $durTotal
    + (str-length($string) * ($durCharFwd + $durCharBwd))
    + $durFullGap + $durDoneGap;
}
@function percent($string, $letter, $modifier) {
    $stringsPast: $string - 1; $time: 0;
    @while $stringsPast > 0 {
        $time: $time
        + (($durCharFwd + $durCharBwd) * (str-length(nth($strings, $stringsPast))))
        + $durFullGap + $durDoneGap;
        $stringsPast: $stringsPast - 1;
    }
    @if $letter <= str-length(nth($strings, $string)) {
        $time: $time
        + ($durCharFwd * ($letter - 1));
    } @else {
        $time: $time
        + ($durCharFwd * str-length(nth($strings, $string)))
        + $durFullGap
        + ($durCharBwd * ($letter - str-length(nth($strings, $string))));
    }
    @return ($time / $durTotal * 100 + $modifier) + "%";
}
$currentPercentage: 0;
// now THIS is where the magic happens...
@keyframes typed {
    @for $i from 1 through length($strings) {
        @for $j from 1 through (str-length(nth($strings, $i)) * 2) {
            /* string #{$i}, char #{$j} */
            @if $j < str-length(nth($strings, $i)) * 2 { // not last character deleted
                #{percent($i, $j, 0)}, #{percent($i, $j+1, -0.001)} {
                    @if $j <= str-length(nth($strings, $i)) {
                        content: quote(#{str_slice(nth($strings, $i), 1, $j)});
                    } @else {
                        content: quote(#{str_slice(nth($strings, $i), 1, str-length(nth($strings, $i)) - ($j - str-length(nth($strings, $i))))});
                    }
                }
            } @else {
                @if $i < length($strings) { // not last string
                    #{percent($i, $j, 0)}, #{percent($i+1, 1, -0.001)} {
                        content: "​"; // zero-width space to retain element height
                    }
                } @else { // last string
                    #{percent($i, $j, 0)}, 100% {
                        content: "​"; // zero-width space to retain element height
                    }
                }
            }
        }
    }
}

@keyframes cursor {
    50% {border-color: transparent}
}

.subtitle {
    &::after {
        content: "​"; // zero-width space to retain element height
        border-right: 1px solid;
        animation: typed #{$durTotal + "s"} linear 1s infinite, cursor 1s infinite;
    }
}
